package deepstream.protocol

enum class META_KEY(encoding: String) {
    payloadEncoding("e"),
    named("n"),
    names("m"),
    subscription("s"),
    correlationId("c"),
    version("v"),
    path("p"),
    reason("r"),
    url("u"),
    originalTopic("t"),
    originalAction("a"),
    protocolVersion("x"),
    requestorName("rn"),
    requestorData("rd"),
    registryTopic("rt")
}

enum class PAYLOAD_ENCODING(encoding: String) {
    JSON("j"),
    BINARY("b")
}

enum class TOPIC(byte: Byte) {
    ERROR(0x00),
    PARSER(0x01),
    CONNECTION(0x02),
    AUTH(0x03),
    EVENT(0x04),
    RECORD(0x05),
    RPC(0x06),
    PRESENCE(0x07),

    SUBSCRIPTIONS(0x10),
    ONLINE_USERS(0x11),

    EVENT_SUBSCRIPTIONS(0x20),
    RECORD_SUBSCRIPTIONS(0x21),
    RPC_SUBSCRIPTIONS(0x22),
    PRESENCE_SUBSCRIPTIONS(0x23),
    RECORD_LISTEN_PATTERNS(0x24),
    EVENT_LISTEN_PATTERNS(0x25),
    RECORD_PUBLISHED_SUBSCRIPTIONS(0x26),
    EVENT_PUBLISHED_SUBSCRIPTIONS(0x27),
    RECORD_LISTENING(0x28),
    EVENT_LISTENING(0x29),

    STATE_REGISTRY(0x30),
    CLUSTER(0x31),
    LOCK(0x32)
}

enum class PARSER_ACTION(byte: Byte) {
    UNKNOWN_TOPIC(0x50),
    UNKNOWN_ACTION(0x51),
    INVALID_MESSAGE(0x52),
    MESSAGE_PARSE_ERROR(0x53),
    MAXIMUM_MESSAGE_SIZE_EXCEEDED(0x54),
    ERROR(0x55),
    INVALID_META_PARAMS(0x56),
}

enum class CONNECTION_ACTION(byte: Byte) {
    ERROR(0x00),
    PING(0x01),
    PONG(0x02),
    ACCEPT(0x03),
    CHALLENGE(0x04),
    REJECT(0x06),
    REDIRECT(0x07),
    CLOSING(0x08),
    CLOSED(0x09),

    AUTHENTICATION_TIMEOUT(0x50),
    INVALID_MESSAGE(0x52),
}

enum class AUTH_ACTION(byte: Byte) {
    ERROR(0x00),
    REQUEST(0x01),
    AUTH_SUCCESSFUL(0x02),
    AUTH_UNSUCCESSFUL(0x03),

    TOO_MANY_AUTH_ATTEMPTS(0x50),
    INVALID_MESSAGE(0x52),

    INVALID_MESSAGE_DATA(0x62),
}

enum class EVENT_ACTION(byte: Byte) {
    ERROR(0x00),
    EMIT(0x01),
    SUBSCRIBE(0x02),
    SUBSCRIBE_ACK(0x82.toByte()),
    UNSUBSCRIBE(0x03),
    UNSUBSCRIBE_ACK(0x83.toByte()),
    LISTEN(0x04),
    LISTEN_ACK(0x84.toByte()),
    UNLISTEN(0x05),
    UNLISTEN_ACK(0x85.toByte()),
    LISTEN_ACCEPT(0x06),
    LISTEN_REJECT(0x07),
    SUBSCRIPTION_FOR_PATTERN_FOUND(0x08),
    SUBSCRIPTION_FOR_PATTERN_REMOVED(0x09),

    INVALID_LISTEN_REGEX(0x50),

    MESSAGE_PERMISSION_ERROR(0x60),
    MESSAGE_DENIED(0x61),
    INVALID_MESSAGE_DATA(0x62),
    MULTIPLE_SUBSCRIPTIONS(0x63),
    NOT_SUBSCRIBED(0x64),
}

enum class RECORD_ACTION(byte: Byte) {
    ERROR(0x00),
    READ(0x01),
    READ_RESPONSE(0x02),
    HEAD(0x03),
    HEAD_RESPONSE(0x04),
    DELETE(0x05),
    DELETE_SUCCESS(0x06),
    DELETED(0x08),
    WRITE_ACKNOWLEDGEMENT(0x09),

    CREATE(0x10),
    CREATEANDUPDATE(0x11),
    CREATEANDUPDATE_WITH_WRITE_ACK(0x12),
    CREATEANDPATCH(0x13),
    CREATEANDPATCH_WITH_WRITE_ACK(0x14),
    UPDATE(0x15),
    UPDATE_WITH_WRITE_ACK(0x16),
    PATCH(0x17),
    PATCH_WITH_WRITE_ACK(0x18),
    ERASE(0x19),
    ERASE_WITH_WRITE_ACK(0x1A),

    SUBSCRIBEANDHEAD(0x20),
    // SUBSCRIBEANDHEAD_RESPONSE(0x21),
    SUBSCRIBEANDREAD(0x22),
    // SUBSCRIBEANDREAD_RESPONSE(0x23),
    SUBSCRIBECREATEANDREAD(0x24),
    // SUBSCRIBECREATEANDREAD_RESPONSE(0x25),
    SUBSCRIBECREATEANDUPDATE(0x26),
    // SUBSCRIBECREATEANDUPDATE_RESPONSE(0x27),
    SUBSCRIBE(0x28),
    SUBSCRIBE_ACK(0xA8.toByte()),
    UNSUBSCRIBE(0x29),
    UNSUBSCRIBE_ACK(0xA9.toByte()),

    LISTEN(0x30),
    LISTEN_ACK(0xB0.toByte()),
    UNLISTEN(0x31),
    UNLISTEN_ACK(0xB1.toByte()),
    LISTEN_ACCEPT(0x32),
    LISTEN_REJECT(0x33),
    SUBSCRIPTION_HAS_PROVIDER(0x34),
    SUBSCRIPTION_HAS_NO_PROVIDER(0x35),
    SUBSCRIPTION_FOR_PATTERN_FOUND(0x36),
    SUBSCRIPTION_FOR_PATTERN_REMOVED(0x37),

    CACHE_RETRIEVAL_TIMEOUT(0x50),
    STORAGE_RETRIEVAL_TIMEOUT(0x51),
    VERSION_EXISTS(0x52),
    RECORD_LOAD_ERROR(0x53),
    RECORD_CREATE_ERROR(0x54),
    RECORD_UPDATE_ERROR(0x55),
    RECORD_DELETE_ERROR(0x56),
    RECORD_NOT_FOUND(0x58),
    INVALID_VERSION(0x59),
    INVALID_PATCH_ON_HOTPATH(0x5A),
    INVALID_LISTEN_REGEX(0x5B),

    MESSAGE_PERMISSION_ERROR(0x60),
    MESSAGE_DENIED(0x61),
    INVALID_MESSAGE_DATA(0x62),
    MULTIPLE_SUBSCRIPTIONS(0x63),
    NOT_SUBSCRIBED(0x64),
}

enum class RPC_ACTION(byte: Byte) {
    ERROR(0x00),
    REQUEST(0x01),
    ACCEPT(0x02),
    RESPONSE(0x03),
    REJECT(0x04),
    REQUEST_ERROR(0x05),
    PROVIDE(0x06),
    PROVIDE_ACK(0x86.toByte()),
    UNPROVIDE(0x07),
    UNPROVIDE_ACK(0x87.toByte()),

    NO_RPC_PROVIDER(0x50),
    ACCEPT_TIMEOUT(0x52),
    MULTIPLE_ACCEPT(0x53),
    INVALID_RPC_CORRELATION_ID(0x54),
    RESPONSE_TIMEOUT(0x55),
    MULTIPLE_RESPONSE(0x56),

    MESSAGE_PERMISSION_ERROR(0x60),
    MESSAGE_DENIED(0x61),
    INVALID_MESSAGE_DATA(0x62),
    MULTIPLE_PROVIDERS(0x63),
    NOT_PROVIDED(0x64),
}

enum class PRESENCE_ACTION(byte: Byte) {
    ERROR(0x00),
    QUERY_ALL(0x01),
    QUERY_ALL_RESPONSE(0x02),
    QUERY(0x03),
    QUERY_RESPONSE(0x04),
    PRESENCE_JOIN(0x05),
    PRESENCE_JOIN_ALL(0x06),
    PRESENCE_LEAVE(0x07),
    PRESENCE_LEAVE_ALL(0x08),
    SUBSCRIBE(0x09),
    SUBSCRIBE_ACK(0x89.toByte()),
    UNSUBSCRIBE(0x0A),
    UNSUBSCRIBE_ACK(0x8A.toByte()),
    SUBSCRIBE_ALL(0x0B),
    SUBSCRIBE_ALL_ACK(0x8B.toByte()),
    UNSUBSCRIBE_ALL(0x0C),
    UNSUBSCRIBE_ALL_ACK(0x8C.toByte()),

    INVALID_PRESENCE_USERS(0x50),

    MESSAGE_PERMISSION_ERROR(0x60),
    MESSAGE_DENIED(0x61),
    MULTIPLE_SUBSCRIPTIONS(0x63),
    NOT_SUBSCRIBED(0x64),
}
